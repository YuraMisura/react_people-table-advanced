{"version":3,"sources":["components/Navbar/Navbar.tsx","App.tsx","pages/HomePage.tsx","pages/PageNotFound.tsx","utils/searchHelper.ts","components/SearchLink.tsx","types/SearchParams.ts","components/PeopleFilters/PeopleFilters.tsx","components/Loader/Loader.tsx","store/PeopleContext.tsx","utils/filter.ts","components/PersonLink/PersonLink.tsx","components/PersonInfo/PersonInfo.tsx","components/PersonTable/PeopleTable.tsx","api.ts","pages/PeoplePage.tsx","Root.tsx","index.tsx"],"names":["getLinkClass","isActive","cn","Navbar","className","role","to","App","HomePage","PageNotFound","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","SearchParams","CENTURIES_OPTION","PeopleFilters","setSearchParams","query","get","sex","centuries","getAll","type","placeholder","onChange","e","searchs","target","map","century","chosenCentury","includes","filter","length","Loader","PeopleContext","React","createContext","setInitialPeople","setIsLoading","setHasError","initialPeople","visiblePeople","isLoading","hasError","PeopleProvide","useState","people","filters","sort","order","lowerQuery","toLowerCase","trim","person","lowerName","name","lowerMotherName","motherName","lowerFatherName","fatherName","Math","ceil","born","person1","person2","localeCompare","died","Error","reverse","getFilteredPeople","state","Provider","PersonLink","slug","pathname","PersonInfo","useContext","useParams","findPersoninList","parentName","find","human","mother","father","PeopleTable","setSortParams","field","API_URL","wait","delay","Promise","resolve","setTimeout","getPeople","then","fetch","response","json","PeoplePage","useEffect","fetchData","loadedPeople","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.ed4d056d.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\nimport cn from 'classnames';\n\nconst getLinkClass = (\n  { isActive }: { isActive: boolean },\n) => cn('navbar-item', { 'has-background-grey-lighter': isActive });\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={getLinkClass}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={getLinkClass}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport './App.scss';\nimport { Navbar } from './components/Navbar/Navbar';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </main>\n    </div>\n  );\n};\n","export const HomePage = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","export const PageNotFound = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","export enum SearchParams {\n  query = 'query',\n  centuries = 'centuries',\n  sex = 'sex',\n  sort = 'sort',\n  order = 'order',\n}\n","import { useSearchParams } from 'react-router-dom';\nimport React from 'react';\nimport cn from 'classnames';\nimport { SearchLink } from '../SearchLink';\nimport { getSearchWith } from '../../utils/searchHelper';\nimport { SearchParams } from '../../types/SearchParams';\n\nconst CENTURIES_OPTION = ['16', '17', '18', '19', '20'];\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const query = searchParams.get(SearchParams.query) || '';\n  const sex = searchParams.get(SearchParams.sex) || '';\n  const centuries = searchParams.getAll(SearchParams.centuries) || [];\n\n  const handleChangeQuery = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const searchs = getSearchWith(\n      searchParams, { query: e.target.value || null },\n    );\n\n    setSearchParams(searchs);\n  };\n\n  const handleCenturyToggle = (chosenCentury: string) => {\n    return {\n      centuries: centuries.includes(chosenCentury)\n        ? centuries.filter(century => chosenCentury !== century)\n        : [...centuries, chosenCentury],\n    };\n  };\n\n  const reset = () => {\n    return {\n      centuries: [],\n      sex: null,\n      query: null,\n    };\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          params={{ sex: null }}\n          className={cn({ 'is-active': !sex })}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          params={{ sex: 'm' }}\n          className={cn({ 'is-active': sex === 'm' })}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          params={{ sex: 'f' }}\n          className={cn({ 'is-active': sex === 'f' })}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleChangeQuery}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div\n          className=\"level is-flex-grow-1 is-mobile\"\n          data-cy=\"CenturyFilter\"\n        >\n          <div className=\"level-left\">\n            {CENTURIES_OPTION.map(century => (\n              <SearchLink\n                data-cy=\"century\"\n                params={handleCenturyToggle(century)}\n                className={cn('button mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n                key={century}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              params={{ centuries: [] }}\n              data-cy=\"centuryALL\"\n              className={cn('button is-success', {\n                'is-outlined ': !!centuries.length,\n              })}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={reset()}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { useSearchParams } from 'react-router-dom';\nimport React, { useState } from 'react';\nimport * as type from '../types';\nimport { getFilteredPeople } from '../utils/filter';\nimport { SearchParams } from '../types/SearchParams';\n\nexport const PeopleContext = React.createContext<type.PeopleContext>({\n  setInitialPeople: () => { },\n  setIsLoading: () => { },\n  setHasError: () => { },\n  initialPeople: [],\n  visiblePeople: [],\n  isLoading: false,\n  hasError: '',\n});\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const PeopleProvide: React.FC<Props> = ({ children }) => {\n  const [searchParams] = useSearchParams();\n  const [initialPeople, setInitialPeople] = useState<type.Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState('');\n\n  const query = searchParams.get(SearchParams.query) || '';\n  const centuries = searchParams.getAll(SearchParams.centuries) || [];\n  const sex = searchParams.get(SearchParams.sex) || '';\n  const sort = searchParams.get(SearchParams.sort) || '';\n  const order = searchParams.get(SearchParams.order) || '';\n\n  const visiblePeople = getFilteredPeople(\n    initialPeople,\n    {\n      query, centuries, sex, sort, order,\n    },\n  );\n\n  const state = {\n    setInitialPeople,\n    setIsLoading,\n    initialPeople,\n    visiblePeople,\n    isLoading,\n    hasError,\n    setHasError,\n  };\n\n  return (\n    <PeopleContext.Provider value={state}>\n      {children}\n    </PeopleContext.Provider>\n  );\n};\n","import { Person } from '../types';\nimport { Filters } from '../types/FilterOptions';\n\nexport function getFilteredPeople(\n  people: Person[],\n  filters: Filters,\n) {\n  let visiblePeople = [...people];\n\n  const {\n    query,\n    centuries,\n    sex,\n    sort,\n    order,\n  } = filters;\n\n  if (query) {\n    const lowerQuery = query.toLowerCase().trim();\n\n    visiblePeople = people.filter(person => {\n      const lowerName = person.name.toLowerCase();\n      const lowerMotherName = person.motherName?.toLowerCase();\n      const lowerFatherName = person.fatherName?.toLowerCase();\n\n      const hasNameMatch = lowerName.includes(lowerQuery)\n        || lowerMotherName?.includes(lowerQuery)\n        || lowerFatherName?.includes(lowerQuery);\n\n      return hasNameMatch;\n    });\n  }\n\n  if (sex) {\n    visiblePeople = visiblePeople.filter(person => person.sex === sex);\n  }\n\n  if (centuries.length) {\n    visiblePeople = visiblePeople.filter(person => {\n      return centuries.includes(Math.ceil(person.born / 100).toString());\n    });\n  }\n\n  if (sort) {\n    switch (sort) {\n      case 'name':\n        visiblePeople.sort((person1, person2) => {\n          return person1.name.localeCompare(person2.name);\n        });\n        break;\n\n      case 'sex':\n        visiblePeople.sort((person1, person2) => {\n          return person1.sex.localeCompare(person2.sex);\n        });\n        break;\n\n      case 'born':\n        visiblePeople.sort((person1, person2) => {\n          return person1.born - person2.born;\n        });\n        break;\n\n      case 'died':\n        visiblePeople.sort((person1, person2) => {\n          return person1.died - person2.died;\n        });\n        break;\n\n      default:\n        throw new Error(\n          'There are no people matching the current search criteria',\n        );\n    }\n  }\n\n  if (order) {\n    visiblePeople.reverse();\n  }\n\n  return visiblePeople;\n}\n","import { Link, useSearchParams } from 'react-router-dom';\nimport React from 'react';\nimport cn from 'classnames';\nimport { Person } from '../../types';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const [searchParams] = useSearchParams();\n  const { name, slug, sex } = person;\n\n  return (\n    <Link\n      to={{\n        pathname: `../${slug}`,\n        search: searchParams.toString(),\n      }}\n      className={cn({\n        'has-text-danger': sex === 'f',\n      })}\n    >\n      {name}\n    </Link>\n  );\n};\n","import React, { useContext } from 'react';\nimport { useParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { Person } from '../../types/Person';\nimport { PersonLink } from '../PersonLink';\nimport { PeopleContext } from '../../store/PeopleContext';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonInfo: React.FC<Props> = ({ person }) => {\n  const { visiblePeople } = useContext(PeopleContext);\n  const { slug } = useParams();\n\n  const findPersoninList = (parentName: string | null) => {\n    return visiblePeople.find(human => human.name === parentName) || null;\n  };\n\n  const mother = findPersoninList(person.motherName);\n  const father = findPersoninList(person.fatherName);\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={cn({ 'has-background-warning': slug === person.slug })}\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n\n      <td>{person.sex}</td>\n      <td>{person.born}</td>\n      <td>{person.died}</td>\n      <td>\n        {mother ? (\n          <PersonLink person={mother} />\n        ) : (\n          person.motherName || '-'\n        )}\n      </td>\n      <td>\n        {father ? (\n          <PersonLink person={father} />\n        ) : (\n          person.fatherName || '-'\n        )}\n      </td>\n    </tr>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport { useContext } from 'react';\nimport cn from 'classnames';\nimport { PersonInfo } from '../PersonInfo';\nimport { PeopleContext } from '../../store/PeopleContext';\nimport { SearchLink } from '../SearchLink';\nimport { SearchParams } from '../../utils/searchHelper';\n\nexport const PeopleTable = () => {\n  const [searchParams] = useSearchParams();\n  const { visiblePeople } = useContext(PeopleContext);\n\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n\n  const setSortParams = (field: string): SearchParams => {\n    if (sort === field && order) {\n      return { sort: null, order: null };\n    }\n\n    if (sort === field) {\n      return { order: 'desc' };\n    }\n\n    return { sort: field, order: null };\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <SearchLink params={setSortParams('name')}>\n                <span className=\"icon\">\n                  <i\n                    className={cn('fas', {\n                      'fa-sort': sort !== 'name',\n                      'fa-sort-up': sort === 'name' && !order,\n                      'fa-sort-down': sort === 'name' && order,\n                    })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span\n              className=\"is-flex is-flex-wrap-nowrap\"\n            >\n              Sex\n              <SearchLink params={setSortParams('sex')}>\n                <span className=\"icon\">\n                  <i\n                    className={cn('fas', {\n                      'fa-sort': sort !== 'sex',\n                      'fa-sort-up': sort === 'sex' && !order,\n                      'fa-sort-down': sort === 'sex' && order,\n                    })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <SearchLink params={setSortParams('born')}>\n                <span className=\"icon\">\n                  <i\n                    className={cn('fas', {\n                      'fa-sort': sort !== 'born',\n                      'fa-sort-up': sort === 'born' && !order,\n                      'fa-sort-down': sort === 'born' && order,\n                    })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <SearchLink params={setSortParams('died')}>\n                <span className=\"icon\">\n                  <i\n                    className={cn('fas', {\n                      'fa-sort': sort !== 'died',\n                      'fa-sort-up': sort === 'died' && !order,\n                      'fa-sort-down': sort === 'died' && order,\n                    })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {visiblePeople.map(person => (\n          <PersonInfo key={person.slug} person={person} />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useContext, useEffect } from 'react';\nimport { PeopleFilters } from '../components/PeopleFilters/PeopleFilters';\nimport { Loader } from '../components/Loader';\nimport { PeopleContext } from '../store/PeopleContext';\nimport { PeopleTable } from '../components/PersonTable';\nimport { getPeople } from '../api';\n\nexport const PeoplePage = () => {\n  const {\n    isLoading,\n    hasError,\n    visiblePeople,\n    initialPeople,\n    setIsLoading,\n    setInitialPeople,\n    setHasError,\n  } = useContext(PeopleContext);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      setHasError('');\n\n      try {\n        const loadedPeople = await getPeople();\n\n        setInitialPeople(loadedPeople);\n      } catch (error) {\n        setHasError('Something went wrong');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {!!initialPeople.length && !hasError && !isLoading && (\n              <PeopleFilters />\n            )}\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {!hasError && (\n                <>\n                  {isLoading ? (\n                    <Loader />\n                  ) : (\n                    <>\n                      {!initialPeople.length && (\n                        <p data-cy=\"noPeopleMessage\">\n                          There are no people on the server\n                        </p>\n                      )}\n\n                      {!!initialPeople.length && !visiblePeople.length && (\n                        <p>\n                          There are no people\n                          matching the current search criteria\n                        </p>\n                      )}\n\n                      {!!visiblePeople.length && <PeopleTable />}\n                    </>\n                  )}\n                </>\n              )}\n\n              {hasError && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  {hasError}\n                </p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import {\n  HashRouter as Router,\n  Routes,\n  Route,\n  Navigate,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { HomePage } from './pages/HomePage';\nimport { PageNotFound } from './pages/PageNotFound';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { PeopleProvide } from './store/PeopleContext';\n\nexport const Root = () => (\n  <Router>\n    <PeopleProvide>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<HomePage />} />\n          <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n\n          <Route path=\"people\">\n            <Route path=\":slug?\" element={<PeoplePage />} />\n          </Route>\n\n          <Route path=\"*\" element={<PageNotFound />} />\n        </Route>\n      </Routes>\n    </PeopleProvide>\n  </Router>\n);\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Root />,\n  );\n"],"sourceRoot":""}